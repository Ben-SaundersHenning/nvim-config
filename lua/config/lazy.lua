-- ================================================================ --
-- ━━━━━━━━━━━━━━━━━━━━━━━━❰ LAZY CONFIG ❱━━━━━━━━━━━━━━━━━━━━━━━━━ --
--                                                                  --
-- Lazy is the package manager used by this config. This file       --
-- installs Lazy, and also calls all of the plugins being used      --
-- in the config.                                                   --
-- ================================================================ --

-- Install lazy.nvim, a modern package manager by Folke
-- Note that this is copied from lazy.nvim, and it safely
-- installs Lazy if it is not already installed.
local lazypath = vim.fn.stdpath('data') .. '/lazy/lazy.nvim'
if not vim.loop.fs_stat(lazypath) then
    vim.fn.system({
        'git',
        'clone',
        '--filter=blob:none',
        'https://github.com/folke/lazy.nvim.git',
        '--branch=stable', -- latest stable release
        lazypath,
    })
end

vim.opt.rtp:prepend(lazypath)

-- Setup for Lazy plugin manager.
-- The plugins directory contains the 
-- configs for each plugin, organized
-- into types (utility plugins, UI plugins,
-- completion stuff, etc..)
require('lazy').setup('plugins')








-- require('lazy').setup({
--
--     --gruvbox by ellisonleo {colorscheme}
--     {
--
--         'ellisonleao/gruvbox.nvim',
--
--         config = function()
--
--             -- require('gruvbox').setup({})
--
--             -- Turn on the colorscheme
--             vim.cmd('colorscheme gruvbox')
--
--         end
--
--     },
--
--     -- Comment {commentor}
--     {
--
--         'numToStr/Comment.nvim',
--
--         -- Mostly copied from the default config,
--         -- with a few adjustments
--         config = function()
--
--             require('Comment').setup({
--
--                 ---Add a space b/w comment and the line
--                 padding = true,
--                 ---Whether the cursor should stay at its position
--                 sticky = true,
--                 ---Lines to be ignored while (un)comment
--                 ignore = nil,
--
--                 ---LHS of toggle mappings in NORMAL mode
--                 toggler = {
--                     ---Line-comment toggle keymap
--                     line = '<leader>i',
--                     ---Block-comment toggle keymap
--                     block = '<leader>u',
--                 },
--
--                 ---LHS of operator-pending mappings in NORMAL and VISUAL mode
--                 opleader = {
--                     ---Line-comment keymap
--                     line = '<leader>i',
--                     ---Block-comment keymap
--                     block = '<leader>u',
--                 },
--
--                 ---Enable keybindings
--                 ---NOTE: If given `false` then the plugin won't create any mappings
--                 mappings = {
--                     ---Operator-pending mapping; `gcc` `gbc` `gc[count]{motion}` `gb[count]{motion}`
--                     basic = true,
--                     ---Extra mapping; `gco`, `gcO`, `gcA`
--                     extra = false,
--                 },
--
--             })
--
--         end
--
--     },
--
--     -- Auto Session Management
--     {
--
--         'rmagatti/auto-session',
--
--         config = function()
--
--             require('auto-session').setup({
--
--             -- These directories will be ommitted from creating 
--             -- automatic sessions
--             auto_session_suppress_dirs = {'~/', '~/code/', '/', '~/Downloads/'},
--
--             })
--
--         end
--
--     },
--
--     -- nvim-web-devicons
--     {
--
--         'nvim-tree/nvim-web-devicons',
--
--         config = function()
--
--             require('nvim-web-devicons').setup({})
--
--         end
--
--     },
--
--     -- Lightweight status line
--     {
--
--         'nvim-lualine/lualine.nvim',
--
--         requires = {'nvim-tree/nvim-web-devicons', opt = true},
--
--         options = {theme = 'gruvbox-material'},
--
--         config = function()
--
--             -- Can edit the config from here, if wanted
--             require('lualine').setup({})
--
--         end
--
--     },
--
--     -- COQ, autocompletion 
--     -- {
--     --
--     --     'ms-jpq/coq_nvim',
--     --
--     --     dependencies = {
--     --
--     --         'ms-jpq/coq.artifacts',
--     --         'ms-jpq/coq.thirdparty',
--     --
--     --     },
--     --
--     --     config = function()
--     --
--     --         local coq = require('coq')
--     --
--     --     end
--     --
--     -- },
--
--         -- Luasnip, a snippet engine (needed for cmp)
--         {
--
--             'L3MON4D3/LuaSnip'
--
--         },
--
--     -- Cmp, Autocompletion
--     {
--
--         'hrsh7th/nvim-cmp',
--
--         config = function()
--
--             local cmp = require('cmp')
--
--             cmp.setup({
--
--                 mapping = cmp.mapping.preset.insert({
--
--                     -- Mapping for enter key
--                     ['<CR>'] = cmp.mapping.confirm({select = true}),
--
--                 }),
--
--                 snippet = {
--
--                     expand = function(args)
--
--                         require('luasnip').lsp_expand(args.body)
--
--                     end,
--
--                 },
--
--                 sources = cmp.config.sources({
--
--                     {name = 'nvim_lsp'},
--                     {name = 'luasnip'},
--
--                 }, {
--
--                     {name = 'buffer'},
--
--                 }),
--
--             })
--
--         end
--
--     },
--
--         -- Cmp, Autocompletion (additional snippets, I think)
--         {
--
--             'hrsh7th/cmp-nvim-lsp',
--
--         },
--
--
--     -- LSP config
--     {
--
--         'neovim/nvim-lspconfig',
--
--         config = function()
--
--             local lspconfig = require('lspconfig')
--             local capabilities = require('cmp_nvim_lsp').default_capabilities()
--             -- local coq = require('coq')
--
--             -- Setup language servers for CMP
--             lspconfig.clangd.setup({capabilities = capabilities})
--             lspconfig.lua_ls.setup({capabilities = capabilities})
--             lspconfig.pyright.setup({capabilities = capabilities})
--             lspconfig.rust_analyzer.setup({capabilities = capabilities})
--             lspconfig.html.setup({capabilities = capabilities, init_options = {embeddedLanguages = {css = true, javascript = true}}})
--             lspconfig.tsserver.setup({capabilities = capabilities})
--             lspconfig.cssls.setup({capabilities = capabilities})
--             -- lspconfig..setup({capabilities = capabilities})
--
--             -- Setup langauge servers for COQ 
--             -- lspconfig.clangd.setup({coq.lsp_ensure_capabilities()})
--             -- lspconfig.lua_ls.setup({coq.lsp_ensure_capabilities()})
--             -- lspconfig.pyright.setup({coq.lsp_ensure_capabilities()})
--             -- lspconfig.rust_analyzer.setup({coq.lsp_ensure_capabilities()})
--
--
--             -- Global mappings These are all defaults.
--
--             -- See `:help vim.diagnostic.*` for documentation on any of the below functions
--             vim.keymap.set('n', '<space>e', vim.diagnostic.open_float)
--             vim.keymap.set('n', '[d', vim.diagnostic.goto_prev)
--             vim.keymap.set('n', ']d', vim.diagnostic.goto_next)
--             vim.keymap.set('n', '<space>q', vim.diagnostic.setloclist)
--
--             -- Use LspAttach autocommand to only map the following keys
--             -- after the language server attaches to the current buffer
--             vim.api.nvim_create_autocmd('LspAttach', {
--               group = vim.api.nvim_create_augroup('UserLspConfig', {}),
--               callback = function(ev)
--                 -- Enable completion triggered by <c-x><c-o>
--                 vim.bo[ev.buf].omnifunc = 'v:lua.vim.lsp.omnifunc'
--
--                 -- Buffer local mappings.
--                 -- See `:help vim.lsp.*` for documentation on any of the below functions
--                 local opts = { buffer = ev.buf }
--                 vim.keymap.set('n', 'gD', vim.lsp.buf.declaration, opts)
--                 vim.keymap.set('n', 'gd', vim.lsp.buf.definition, opts)
--                 vim.keymap.set('n', 'K', vim.lsp.buf.hover, opts)
--                 vim.keymap.set('n', 'gi', vim.lsp.buf.implementation, opts)
--                 vim.keymap.set('n', '<C-k>', vim.lsp.buf.signature_help, opts)
--                 vim.keymap.set('n', '<space>wa', vim.lsp.buf.add_workspace_folder, opts)
--                 vim.keymap.set('n', '<space>wr', vim.lsp.buf.remove_workspace_folder, opts)
--                 vim.keymap.set('n', '<space>wl', function()
--                   print(vim.inspect(vim.lsp.buf.list_workspace_folders()))
--                 end, opts)
--                 vim.keymap.set('n', '<space>D', vim.lsp.buf.type_definition, opts)
--                 vim.keymap.set('n', '<space>rn', vim.lsp.buf.rename, opts)
--                 vim.keymap.set('n', '<space>ca', vim.lsp.buf.code_action, opts)
--                 vim.keymap.set('n', 'gr', vim.lsp.buf.references, opts)
--                 vim.keymap.set('n', '<space>f', function()
--                   vim.lsp.buf.format { async = true }
--                 end, opts)
--               end,
--             })
--
--         end
--
--     },
--
--     -- Treesitter
--     {
--
--         'nvim-treesitter/nvim-treesitter',
--         
--         config = function()
--
--             vim.cmd('TSUpdate')
--
--         end
--
--     },
--
--     -- Mason, a package manager for language servers and more
--     {
--
--         'williamboman/mason.nvim',
--
--         build = ":MasonUpdate",
--
--         config = function ()
--
--             require('mason').setup({})
--
--         end
--
--     },
--
--     -- Tabbar
--     -- {
--     --
--     --     'romgrk/barbar.nvim',
--     --
--     --     dependencies = 'nvim-tree/nvim-web-devicons',
--     --
--     --     config = function()
--     --
--     --         -- require('barbar').setup({})
--     --
--     --     end
--     --
--     -- },
--
-- })
